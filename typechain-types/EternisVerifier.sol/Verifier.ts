/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Reclaim {
  export type ClaimInfoStruct = {
    provider: string;
    parameters: string;
    context: string;
  };

  export type ClaimInfoStructOutput = [
    provider: string,
    parameters: string,
    context: string
  ] & { provider: string; parameters: string; context: string };

  export type CompleteClaimDataStruct = {
    identifier: BytesLike;
    owner: AddressLike;
    timestampS: BigNumberish;
    epoch: BigNumberish;
  };

  export type CompleteClaimDataStructOutput = [
    identifier: string,
    owner: string,
    timestampS: bigint,
    epoch: bigint
  ] & { identifier: string; owner: string; timestampS: bigint; epoch: bigint };

  export type SignedClaimStruct = {
    claim: Reclaim.CompleteClaimDataStruct;
    signatures: BytesLike[];
  };

  export type SignedClaimStructOutput = [
    claim: Reclaim.CompleteClaimDataStructOutput,
    signatures: string[]
  ] & { claim: Reclaim.CompleteClaimDataStructOutput; signatures: string[] };

  export type ProofStruct = {
    claimInfo: Reclaim.ClaimInfoStruct;
    signedClaim: Reclaim.SignedClaimStruct;
  };

  export type ProofStructOutput = [
    claimInfo: Reclaim.ClaimInfoStructOutput,
    signedClaim: Reclaim.SignedClaimStructOutput
  ] & {
    claimInfo: Reclaim.ClaimInfoStructOutput;
    signedClaim: Reclaim.SignedClaimStructOutput;
  };
}

export interface VerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "eternisId"
      | "getIdentity"
      | "identifierToId"
      | "reclaimAddress"
      | "totalUsers"
      | "userCount"
      | "verifyProof"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "IdentityCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "eternisId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "identifierToId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUsers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "userCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [Reclaim.ProofStruct]
  ): string;

  decodeFunctionResult(functionFragment: "eternisId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "identifierToId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reclaimAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalUsers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
}

export namespace IdentityCreatedEvent {
  export type InputTuple = [userCount: BigNumberish];
  export type OutputTuple = [userCount: bigint];
  export interface OutputObject {
    userCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Verifier extends BaseContract {
  connect(runner?: ContractRunner | null): Verifier;
  waitForDeployment(): Promise<this>;

  interface: VerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  eternisId: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, string] & { identifier: bigint; jurisdiction: string }],
    "view"
  >;

  getIdentity: TypedContractMethod<
    [id: BigNumberish],
    [[bigint, string]],
    "view"
  >;

  identifierToId: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  reclaimAddress: TypedContractMethod<[], [string], "view">;

  totalUsers: TypedContractMethod<[], [bigint], "view">;

  userCount: TypedContractMethod<[], [bigint], "view">;

  verifyProof: TypedContractMethod<
    [proof: Reclaim.ProofStruct],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "eternisId"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, string] & { identifier: bigint; jurisdiction: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIdentity"
  ): TypedContractMethod<[id: BigNumberish], [[bigint, string]], "view">;
  getFunction(
    nameOrSignature: "identifierToId"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "reclaimAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifyProof"
  ): TypedContractMethod<[proof: Reclaim.ProofStruct], [bigint], "nonpayable">;

  getEvent(
    key: "IdentityCreated"
  ): TypedContractEvent<
    IdentityCreatedEvent.InputTuple,
    IdentityCreatedEvent.OutputTuple,
    IdentityCreatedEvent.OutputObject
  >;

  filters: {
    "IdentityCreated(uint256)": TypedContractEvent<
      IdentityCreatedEvent.InputTuple,
      IdentityCreatedEvent.OutputTuple,
      IdentityCreatedEvent.OutputObject
    >;
    IdentityCreated: TypedContractEvent<
      IdentityCreatedEvent.InputTuple,
      IdentityCreatedEvent.OutputTuple,
      IdentityCreatedEvent.OutputObject
    >;
  };
}
