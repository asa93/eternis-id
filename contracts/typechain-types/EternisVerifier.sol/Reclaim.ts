/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Reclaim {
  export type ClaimInfoStruct = {
    provider: string;
    parameters: string;
    context: string;
  };

  export type ClaimInfoStructOutput = [
    provider: string,
    parameters: string,
    context: string
  ] & { provider: string; parameters: string; context: string };

  export type CompleteClaimDataStruct = {
    identifier: BytesLike;
    owner: AddressLike;
    timestampS: BigNumberish;
    epoch: BigNumberish;
  };

  export type CompleteClaimDataStructOutput = [
    identifier: string,
    owner: string,
    timestampS: bigint,
    epoch: bigint
  ] & { identifier: string; owner: string; timestampS: bigint; epoch: bigint };

  export type SignedClaimStruct = {
    claim: Reclaim.CompleteClaimDataStruct;
    signatures: BytesLike[];
  };

  export type SignedClaimStructOutput = [
    claim: Reclaim.CompleteClaimDataStructOutput,
    signatures: string[]
  ] & { claim: Reclaim.CompleteClaimDataStructOutput; signatures: string[] };

  export type ProofStruct = {
    claimInfo: Reclaim.ClaimInfoStruct;
    signedClaim: Reclaim.SignedClaimStruct;
  };

  export type ProofStructOutput = [
    claimInfo: Reclaim.ClaimInfoStructOutput,
    signedClaim: Reclaim.SignedClaimStructOutput
  ] & {
    claimInfo: Reclaim.ClaimInfoStructOutput;
    signedClaim: Reclaim.SignedClaimStructOutput;
  };
}

export interface ReclaimInterface extends Interface {
  getFunction(nameOrSignature: "verifyProof"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [Reclaim.ProofStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
}

export interface Reclaim extends BaseContract {
  connect(runner?: ContractRunner | null): Reclaim;
  waitForDeployment(): Promise<this>;

  interface: ReclaimInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  verifyProof: TypedContractMethod<
    [proof: Reclaim.ProofStruct],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "verifyProof"
  ): TypedContractMethod<[proof: Reclaim.ProofStruct], [void], "view">;

  filters: {};
}
