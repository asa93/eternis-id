/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Reclaim {
  export type WitnessStruct = {
    addr: PromiseOrValue<string>;
    host: PromiseOrValue<string>;
  };

  export type WitnessStructOutput = [string, string] & {
    addr: string;
    host: string;
  };

  export type EpochStruct = {
    id: PromiseOrValue<BigNumberish>;
    timestampStart: PromiseOrValue<BigNumberish>;
    timestampEnd: PromiseOrValue<BigNumberish>;
    witnesses: Reclaim.WitnessStruct[];
    minimumWitnessesForClaimCreation: PromiseOrValue<BigNumberish>;
  };

  export type EpochStructOutput = [
    number,
    number,
    number,
    Reclaim.WitnessStructOutput[],
    number
  ] & {
    id: number;
    timestampStart: number;
    timestampEnd: number;
    witnesses: Reclaim.WitnessStructOutput[];
    minimumWitnessesForClaimCreation: number;
  };
}

export declare namespace Claims {
  export type ClaimInfoStruct = {
    provider: PromiseOrValue<string>;
    parameters: PromiseOrValue<string>;
    context: PromiseOrValue<string>;
  };

  export type ClaimInfoStructOutput = [string, string, string] & {
    provider: string;
    parameters: string;
    context: string;
  };

  export type CompleteClaimDataStruct = {
    infoHash: PromiseOrValue<BytesLike>;
    owner: PromiseOrValue<string>;
    timestampS: PromiseOrValue<BigNumberish>;
    claimId: PromiseOrValue<BigNumberish>;
  };

  export type CompleteClaimDataStructOutput = [
    string,
    string,
    number,
    BigNumber
  ] & {
    infoHash: string;
    owner: string;
    timestampS: number;
    claimId: BigNumber;
  };
}

export interface ReclaimInterface extends utils.Interface {
  functions: {
    "MAX_CLAIM_LIFETIME_S()": FunctionFragment;
    "addAsWitness(address,string)": FunctionFragment;
    "addNewEpoch()": FunctionFragment;
    "assertValidSignedClaim(uint256,bytes[])": FunctionFragment;
    "assertValidSignedClaimAndInfoHash(uint256,(string,string,string),bytes[])": FunctionFragment;
    "claimCreations(uint256)": FunctionFragment;
    "createFees()": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "epochDurationS()": FunctionFragment;
    "epochs(uint256)": FunctionFragment;
    "fetchEpoch(uint32)": FunctionFragment;
    "getClaimWitnesses(uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "latestRequestId()": FunctionFragment;
    "minimumWitnessesForClaimCreation()": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeAsWitness(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestClaimCreate(bytes32)": FunctionFragment;
    "requestClaimCreateForAnother(bytes,bytes32,uint64)": FunctionFragment;
    "scFeesKeepPercentage()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCreationFees(uint256)": FunctionFragment;
    "updateSmartContractFeesKeepPercentage(uint8)": FunctionFragment;
    "updateWitnessWhitelist(address,bool)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "witnesses(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_CLAIM_LIFETIME_S"
      | "addAsWitness"
      | "addNewEpoch"
      | "assertValidSignedClaim"
      | "assertValidSignedClaimAndInfoHash"
      | "claimCreations"
      | "createFees"
      | "currentEpoch"
      | "epochDurationS"
      | "epochs"
      | "fetchEpoch"
      | "getClaimWitnesses"
      | "initialize"
      | "latestRequestId"
      | "minimumWitnessesForClaimCreation"
      | "owner"
      | "proxiableUUID"
      | "removeAsWitness"
      | "renounceOwnership"
      | "requestClaimCreate"
      | "requestClaimCreateForAnother"
      | "scFeesKeepPercentage"
      | "transfer"
      | "transferOwnership"
      | "updateCreationFees"
      | "updateSmartContractFeesKeepPercentage"
      | "updateWitnessWhitelist"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "witnesses"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_CLAIM_LIFETIME_S",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAsWitness",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addNewEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assertValidSignedClaim",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "assertValidSignedClaimAndInfoHash",
    values: [
      PromiseOrValue<BigNumberish>,
      Claims.ClaimInfoStruct,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCreations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochDurationS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchEpoch",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimWitnesses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumWitnessesForClaimCreation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAsWitness",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestClaimCreate",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestClaimCreateForAnother",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scFeesKeepPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCreationFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSmartContractFeesKeepPercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWitnessWhitelist",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "witnesses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_CLAIM_LIFETIME_S",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAsWitness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNewEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertValidSignedClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertValidSignedClaimAndInfoHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCreations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochDurationS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fetchEpoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimWitnesses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumWitnessesForClaimCreation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAsWitness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestClaimCreate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestClaimCreateForAnother",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scFeesKeepPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCreationFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSmartContractFeesKeepPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWitnessWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "witnesses", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ClaimCreated(uint256)": EventFragment;
    "ClaimCreationRequested(uint256,bytes32,address,uint32,address,string[],address[],uint256)": EventFragment;
    "EpochAdded(tuple)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimCreationRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface ClaimCreatedEventObject {
  requestId: BigNumber;
}
export type ClaimCreatedEvent = TypedEvent<
  [BigNumber],
  ClaimCreatedEventObject
>;

export type ClaimCreatedEventFilter = TypedEventFilter<ClaimCreatedEvent>;

export interface ClaimCreationRequestedEventObject {
  claimId: BigNumber;
  infoHash: string;
  owner: string;
  timestampS: number;
  requestor: string;
  witnessHosts: string[];
  witnessAddresses: string[];
  feesPaid: BigNumber;
}
export type ClaimCreationRequestedEvent = TypedEvent<
  [BigNumber, string, string, number, string, string[], string[], BigNumber],
  ClaimCreationRequestedEventObject
>;

export type ClaimCreationRequestedEventFilter =
  TypedEventFilter<ClaimCreationRequestedEvent>;

export interface EpochAddedEventObject {
  epoch: Reclaim.EpochStructOutput;
}
export type EpochAddedEvent = TypedEvent<
  [Reclaim.EpochStructOutput],
  EpochAddedEventObject
>;

export type EpochAddedEventFilter = TypedEventFilter<EpochAddedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Reclaim extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReclaimInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_CLAIM_LIFETIME_S(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAsWitness(
      witnessAddress: PromiseOrValue<string>,
      host: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addNewEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assertValidSignedClaim(
      claimId: PromiseOrValue<BigNumberish>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[void]>;

    assertValidSignedClaimAndInfoHash(
      claimId: PromiseOrValue<BigNumberish>,
      claimInfo: Claims.ClaimInfoStruct,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[void]>;

    claimCreations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [Claims.CompleteClaimDataStructOutput, string, BigNumber] & {
        claim: Claims.CompleteClaimDataStructOutput;
        requestor: string;
        feesPaid: BigNumber;
      }
    >;

    createFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentEpoch(overrides?: CallOverrides): Promise<[number]>;

    epochDurationS(overrides?: CallOverrides): Promise<[number]>;

    epochs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        id: number;
        timestampStart: number;
        timestampEnd: number;
        minimumWitnessesForClaimCreation: number;
      }
    >;

    fetchEpoch(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Reclaim.EpochStructOutput]>;

    getClaimWitnesses(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    latestRequestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumWitnessesForClaimCreation(
      overrides?: CallOverrides
    ): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeAsWitness(
      witnessAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestClaimCreate(
      infoHash: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestClaimCreateForAnother(
      signature: PromiseOrValue<BytesLike>,
      infoHash: PromiseOrValue<BytesLike>,
      expiryTimestampMs: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scFeesKeepPercentage(overrides?: CallOverrides): Promise<[number]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCreationFees(
      newCreationFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSmartContractFeesKeepPercentage(
      newPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWitnessWhitelist(
      addr: PromiseOrValue<string>,
      isWhitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    witnesses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { addr: string; host: string }>;
  };

  MAX_CLAIM_LIFETIME_S(overrides?: CallOverrides): Promise<BigNumber>;

  addAsWitness(
    witnessAddress: PromiseOrValue<string>,
    host: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addNewEpoch(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assertValidSignedClaim(
    claimId: PromiseOrValue<BigNumberish>,
    signatures: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<void>;

  assertValidSignedClaimAndInfoHash(
    claimId: PromiseOrValue<BigNumberish>,
    claimInfo: Claims.ClaimInfoStruct,
    signatures: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<void>;

  claimCreations(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [Claims.CompleteClaimDataStructOutput, string, BigNumber] & {
      claim: Claims.CompleteClaimDataStructOutput;
      requestor: string;
      feesPaid: BigNumber;
    }
  >;

  createFees(overrides?: CallOverrides): Promise<BigNumber>;

  currentEpoch(overrides?: CallOverrides): Promise<number>;

  epochDurationS(overrides?: CallOverrides): Promise<number>;

  epochs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number] & {
      id: number;
      timestampStart: number;
      timestampEnd: number;
      minimumWitnessesForClaimCreation: number;
    }
  >;

  fetchEpoch(
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Reclaim.EpochStructOutput>;

  getClaimWitnesses(
    requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  latestRequestId(overrides?: CallOverrides): Promise<BigNumber>;

  minimumWitnessesForClaimCreation(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeAsWitness(
    witnessAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestClaimCreate(
    infoHash: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestClaimCreateForAnother(
    signature: PromiseOrValue<BytesLike>,
    infoHash: PromiseOrValue<BytesLike>,
    expiryTimestampMs: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scFeesKeepPercentage(overrides?: CallOverrides): Promise<number>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCreationFees(
    newCreationFees: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSmartContractFeesKeepPercentage(
    newPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWitnessWhitelist(
    addr: PromiseOrValue<string>,
    isWhitelisted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  witnesses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { addr: string; host: string }>;

  callStatic: {
    MAX_CLAIM_LIFETIME_S(overrides?: CallOverrides): Promise<BigNumber>;

    addAsWitness(
      witnessAddress: PromiseOrValue<string>,
      host: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addNewEpoch(overrides?: CallOverrides): Promise<void>;

    assertValidSignedClaim(
      claimId: PromiseOrValue<BigNumberish>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    assertValidSignedClaimAndInfoHash(
      claimId: PromiseOrValue<BigNumberish>,
      claimInfo: Claims.ClaimInfoStruct,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimCreations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [Claims.CompleteClaimDataStructOutput, string, BigNumber] & {
        claim: Claims.CompleteClaimDataStructOutput;
        requestor: string;
        feesPaid: BigNumber;
      }
    >;

    createFees(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<number>;

    epochDurationS(overrides?: CallOverrides): Promise<number>;

    epochs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        id: number;
        timestampStart: number;
        timestampEnd: number;
        minimumWitnessesForClaimCreation: number;
      }
    >;

    fetchEpoch(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Reclaim.EpochStructOutput>;

    getClaimWitnesses(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    initialize(overrides?: CallOverrides): Promise<void>;

    latestRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    minimumWitnessesForClaimCreation(
      overrides?: CallOverrides
    ): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeAsWitness(
      witnessAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestClaimCreate(
      infoHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string[]]>;

    requestClaimCreateForAnother(
      signature: PromiseOrValue<BytesLike>,
      infoHash: PromiseOrValue<BytesLike>,
      expiryTimestampMs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string[]]>;

    scFeesKeepPercentage(overrides?: CallOverrides): Promise<number>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCreationFees(
      newCreationFees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSmartContractFeesKeepPercentage(
      newPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWitnessWhitelist(
      addr: PromiseOrValue<string>,
      isWhitelisted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    witnesses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { addr: string; host: string }>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "ClaimCreated(uint256)"(requestId?: null): ClaimCreatedEventFilter;
    ClaimCreated(requestId?: null): ClaimCreatedEventFilter;

    "ClaimCreationRequested(uint256,bytes32,address,uint32,address,string[],address[],uint256)"(
      claimId?: null,
      infoHash?: null,
      owner?: null,
      timestampS?: null,
      requestor?: null,
      witnessHosts?: null,
      witnessAddresses?: null,
      feesPaid?: null
    ): ClaimCreationRequestedEventFilter;
    ClaimCreationRequested(
      claimId?: null,
      infoHash?: null,
      owner?: null,
      timestampS?: null,
      requestor?: null,
      witnessHosts?: null,
      witnessAddresses?: null,
      feesPaid?: null
    ): ClaimCreationRequestedEventFilter;

    "EpochAdded(tuple)"(epoch?: null): EpochAddedEventFilter;
    EpochAdded(epoch?: null): EpochAddedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    MAX_CLAIM_LIFETIME_S(overrides?: CallOverrides): Promise<BigNumber>;

    addAsWitness(
      witnessAddress: PromiseOrValue<string>,
      host: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addNewEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assertValidSignedClaim(
      claimId: PromiseOrValue<BigNumberish>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assertValidSignedClaimAndInfoHash(
      claimId: PromiseOrValue<BigNumberish>,
      claimInfo: Claims.ClaimInfoStruct,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimCreations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createFees(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    epochDurationS(overrides?: CallOverrides): Promise<BigNumber>;

    epochs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchEpoch(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimWitnesses(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    latestRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    minimumWitnessesForClaimCreation(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeAsWitness(
      witnessAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestClaimCreate(
      infoHash: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestClaimCreateForAnother(
      signature: PromiseOrValue<BytesLike>,
      infoHash: PromiseOrValue<BytesLike>,
      expiryTimestampMs: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scFeesKeepPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCreationFees(
      newCreationFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSmartContractFeesKeepPercentage(
      newPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWitnessWhitelist(
      addr: PromiseOrValue<string>,
      isWhitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    witnesses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_CLAIM_LIFETIME_S(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAsWitness(
      witnessAddress: PromiseOrValue<string>,
      host: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addNewEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assertValidSignedClaim(
      claimId: PromiseOrValue<BigNumberish>,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assertValidSignedClaimAndInfoHash(
      claimId: PromiseOrValue<BigNumberish>,
      claimInfo: Claims.ClaimInfoStruct,
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimCreations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochDurationS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchEpoch(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimWitnesses(
      requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    latestRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumWitnessesForClaimCreation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAsWitness(
      witnessAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestClaimCreate(
      infoHash: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestClaimCreateForAnother(
      signature: PromiseOrValue<BytesLike>,
      infoHash: PromiseOrValue<BytesLike>,
      expiryTimestampMs: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scFeesKeepPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCreationFees(
      newCreationFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSmartContractFeesKeepPercentage(
      newPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWitnessWhitelist(
      addr: PromiseOrValue<string>,
      isWhitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    witnesses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
